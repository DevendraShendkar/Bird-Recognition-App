<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/home"
        android:icon="@drawable/baseline_home_24"
        android:title="Home"/>


    <item android:id="@+id/search"
        android:icon="@drawable/baseline_search_24"
        android:title="Search"/>


</menu>
<!--    package com.example.birdrecognition-->

<!--    import android.app.PendingIntent-->
<!--    import android.content.Context-->
<!--    import android.content.Intent-->
<!--    import android.graphics.Bitmap-->
<!--    import android.net.Uri-->
<!--    import androidx.appcompat.app.AppCompatActivity-->
<!--    import android.os.Bundle-->
<!--    import android.os.Handler-->
<!--    import android.provider.MediaStore-->
<!--    import android.speech.tts.TextToSpeech-->
<!--    import android.speech.tts.TextToSpeechService-->
<!--    import android.util.Log-->
<!--    import androidx.core.view.isVisible-->
<!--    import com.example.birdrecognition.databinding.ActivityHomeBinding-->
<!--    import com.example.birdrecognition.ml.MyModel-->
<!--    import org.tensorflow.lite.DataType-->
<!--    import org.tensorflow.lite.support.tensorbuffer.TensorBuffer-->
<!--    import java.nio.ByteBuffer-->
<!--    import java.util.Locale-->

<!--    class HomeActivity : AppCompatActivity() {-->
<!--    private lateinit var binding: ActivityHomeBinding-->
<!--    private lateinit var textToSpeech: TextToSpeech-->
<!--    override fun onCreate(savedInstanceState: Bundle?) {-->
<!--    super.onCreate(savedInstanceState)-->
<!--    binding = ActivityHomeBinding.inflate(layoutInflater)-->
<!--    setContentView(binding.root)-->

<!--    //        Handler().postDelayed({-->
<!--    //            binding.birdHi.isVisible = false-->
<!--    //        }, 4000)-->

<!--    binding.imageSelect.speed = 0.9f-->

<!--    textToSpeech = TextToSpeech(this, TextToSpeech.OnInitListener {-->
<!--    if (it == TextToSpeech.SUCCESS) {-->
<!--    var text = "Please select a image"-->

<!--    textToSpeech.language = Locale.ENGLISH-->
<!--    textToSpeech.setSpeechRate(0.75f)-->
<!--    textToSpeech.speak(text, TextToSpeech.QUEUE_ADD, null)-->

<!--    }-->
<!--    })-->

<!--    binding.imageSelect.setOnClickListener {-->
<!--    val i = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)-->
<!--    i.type = "image/*"-->
<!--    startActivityForResult(i, 85)-->

<!--    }-->
<!--    binding.imageBird.setOnClickListener {-->
<!--    val i = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)-->
<!--    i.type = "image/*"-->
<!--    startActivityForResult(i, 85)-->
<!--    }-->
<!--    }-->

<!--    override fun onPause() {-->
<!--    super.onPause()-->
<!--    textToSpeech.stop()-->
<!--    }-->

<!--    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {-->
<!--    super.onActivityResult(requestCode, resultCode, data)-->

<!--    if (requestCode == 85 && resultCode == RESULT_OK && data != null) {-->

<!--    val imageUri: Uri? = data?.data-->

<!--    if (imageUri != null) {-->
<!--    binding.imageSelect.isVisible = false-->
<!--    binding.text.isVisible = false-->
<!--    binding.imageBird.setImageURI(imageUri)-->

<!--    val bitmap = MediaStore.Images.Media.getBitmap(contentResolver, imageUri)-->
<!--    val resizedBitmap = Bitmap.createScaledBitmap(bitmap, 32, 32, true)-->

<!--    val byteBuffer = ByteBuffer.allocateDirect(32 * 32 * 3 * 4)-->

<!--    val pixels = IntArray(32 * 32)-->
<!--    resizedBitmap.getPixels(pixels, 0, 32, 0, 0, 32, 32)-->

<!--    // Convert and pass the resized image as a ByteBuffer directly-->
<!--    for (pixelValue in pixels) {-->
<!--    val r = ((pixelValue shr 16) and 0xFF) / 255.0f-->
<!--    val g = ((pixelValue shr 8) and 0xFF) / 255.0f-->
<!--    val b = (pixelValue and 0xFF) / 255.0f-->
<!--    byteBuffer.putFloat(r)-->
<!--    byteBuffer.putFloat(g)-->
<!--    byteBuffer.putFloat(b)-->
<!--    }-->

<!--    byteBuffer.rewind()-->

<!--    // Load the TFLite model using MyModel.newInstance-->
<!--    val model = MyModel.newInstance(this)-->

<!--    // Create the input TensorBuffer-->
<!--    val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 32, 32, 3), DataType.FLOAT32)-->
<!--    inputFeature0.loadBuffer(byteBuffer)-->

<!--    // Process the input TensorBuffer to get the predictions-->
<!--    val outputs = model.process(inputFeature0)-->
<!--    val outputFeature0 = outputs.outputFeature0AsTensorBuffer-->

<!--    // Get the predicted class index (UPDATED)-->
<!--    var predictedIndex = -1-->
<!--    var maxProb = Float.MIN_VALUE-->
<!--    for (i in outputFeature0.floatArray.indices) {-->
<!--    if (outputFeature0.floatArray[i] > maxProb) {-->
<!--    maxProb = outputFeature0.floatArray[i]-->
<!--    predictedIndex = i-->
<!--    }-->
<!--    }-->


<!--    Log.d("Output Probabilities", outputFeature0.floatArray.contentToString())-->
<!--    val classNames = listOf("Black_footed_Albatross" ,"Laysan_Albatross", "Sooty_Albatross", "Groove_billed_Ani", "Crested_Auklet", "Least_Auklet", "Parakeet_Auklet", "Rhinoceros_Auklet", "Brewer_Blackbird", "Red_winged_Blackbird", "Rusty_Blackbird", "Yellow_headed_Blackbird", "Bobolink",-->
<!--    "Indigo_Bunting",-->
<!--    "Lazuli_Bunting",-->
<!--    "Painted_Bunting",-->
<!--    "Cardinal",-->
<!--    "Spotted_Catbird",-->
<!--    "Gray_Catbird",-->
<!--    "Yellow_breasted_Chat",-->
<!--    "Eastern_Towhee",-->
<!--    "Chuck_will_Widow",-->
<!--    "Brandt_Cormorant",-->
<!--    "Red_faced_Cormorant",-->
<!--    "Pelagic_Cormorant",-->
<!--    "Bronzed_Cowbird",-->
<!--    "Shiny_Cowbird",-->
<!--    "Brown_Creeper",-->
<!--    "American_Crow",-->
<!--    "Fish_Crow",-->
<!--    "Black_billed_Cuckoo",-->
<!--    "Mangrove_Cuckoo",-->
<!--    "Yellow_billed_Cuckoo",-->
<!--    "Gray_crowned_Rosy_Finch",-->
<!--    "Purple_Finch",-->
<!--    "Northern_Flicker",-->
<!--    "Acadian_Flycatcher",-->
<!--    "Great_Crested_Flycatcher",-->
<!--    "Least_Flycatcher",-->
<!--    "Olive_sided_Flycatcher",-->
<!--    "Scissor_tailed_Flycatcher",-->
<!--    "Vermilion_Flycatcher",-->
<!--    "Yellow_bellied_Flycatcher",-->
<!--    "Frigatebird",-->
<!--    "Northern_Fulmar",-->
<!--    "Gadwall",-->
<!--    "American_Goldfinch",-->
<!--    "European_Goldfinch",-->
<!--    "Boat_tailed_Grackle",-->
<!--    "Eared_Grebe",-->
<!--    "Horned_Grebe",-->
<!--    "Pied_billed_Grebe",-->
<!--    "Western_Grebe",-->
<!--    "Blue_Grosbeak",-->
<!--    "Evening_Grosbeak",-->
<!--    "Pine_Grosbeak",-->
<!--    "Rose_breasted_Grosbeak",-->
<!--    "Pigeon_Guillemot",-->
<!--    "California_Gull",-->
<!--    "Glaucous_winged_Gull",-->
<!--    "Heermann_Gull",-->
<!--    "Herring_Gull",-->
<!--    "Ivory_Gull",-->
<!--    "Ring_billed_Gull",-->
<!--    "Slaty_backed_Gull",-->
<!--    "Western_Gull",-->
<!--    "Anna_Hummingbird",-->
<!--    "Ruby_throated_Hummingbird",-->
<!--    "Rufous_Hummingbird",-->
<!--    "Green_Violetear",-->
<!--    "Long_tailed_Jaeger",-->
<!--    "Pomarine_Jaeger",-->
<!--    "Blue_Jay",-->
<!--    "Florida_Jay",-->
<!--    "Green_Jay",-->
<!--    "Dark_eyed_Junco",-->
<!--    "Tropical_Kingbird",-->
<!--    "Gray_Kingbird",-->
<!--    "Belted_Kingfisher",-->
<!--    "Green_Kingfisher",-->
<!--    "Pied_Kingfisher",-->
<!--    "Ringed_Kingfisher",-->
<!--    "White_breasted_Kingfisher",-->
<!--    "Red_legged_Kittiwake",-->
<!--    "Horned_Lark",-->
<!--    "Pacific_Loon",-->
<!--    "Mallard",-->
<!--    "Western_Meadowlark",-->
<!--    "Hooded_Merganser",-->
<!--    "Red_breasted_Merganser",-->
<!--    "Mockingbird",-->
<!--    "Nighthawk",-->
<!--    "Clark_Nutcracker",-->
<!--    "White_breasted_Nuthatch",-->
<!--    "Baltimore_Oriole",-->
<!--    "Hooded_Oriole",-->
<!--    "Orchard_Oriole",-->
<!--    "Scott_Oriole",-->
<!--    "Ovenbird",-->
<!--    "Brown_Pelican",-->
<!--    "White_Pelican",-->
<!--    "Western_Wood_Pewee",-->
<!--    "Sayornis",-->
<!--    "American_Pipit",-->
<!--    "Whip_poor_Will",-->
<!--    "Horned_Puffin",-->
<!--    "Common_Raven",-->
<!--    "White_necked_Raven",-->
<!--    "American_Redstart",-->
<!--    "Geococcyx",-->
<!--    "Loggerhead_Shrike",-->
<!--    "Great_Grey_Shrike",-->
<!--    "Baird_Sparrow",-->
<!--    "Chipping_Sparrow",-->
<!--    "Clay_colored_Sparrow",-->
<!--    "House_Sparrow",-->
<!--    "Field_Sparrow",-->
<!--    "Fox_Sparrow",-->
<!--    "Grasshopper_Sparrow",-->
<!--    "Harris_Sparrow",-->
<!--    "Henslow_Sparrow",-->
<!--    "Le_Conte_Sparrow",-->
<!--    "Lincoln_Sparrow",-->
<!--    "Nelson_Sharp_tailed_Sparrow",-->
<!--    "Savannah_Sparrow",-->
<!--    "Seaside_Sparrow",-->
<!--    "Song_Sparrow",-->
<!--    "Tree_Sparrow",-->
<!--    "Vesper_Sparrow",-->
<!--    "White_crowned_Sparrow",-->
<!--    "White_throated_Sparrow",-->
<!--    "Cape_Glossy_Starling",-->
<!--    "Bank_Swallow",-->
<!--    "Barn_Swallow",-->
<!--    "Cliff_Swallow",-->
<!--    "Tree_Swallow",-->
<!--    "Scarlet_Tanager",-->
<!--    "Summer_Tanager",-->
<!--    "Artic_Tern",-->
<!--    "Black_Tern",-->
<!--    "Caspian_Tern",-->
<!--    "Common_Tern",-->
<!--    "Elegant_Tern",-->
<!--    "Forsters_Tern",-->
<!--    "Least_Tern",-->
<!--    "Green_tailed_Towhee",-->
<!--    "Brown_Thrasher",-->
<!--    "Sage_Thrasher",-->
<!--    "Black_capped_Vireo",-->
<!--    "Blue_headed_Vireo",-->
<!--    "Philadelphia_Vireo",-->
<!--    "Red_eyed_Vireo",-->
<!--    "Warbling_Vireo",-->
<!--    "White_eyed_Vireo",-->
<!--    "Yellow_throated_Vireo",-->
<!--    "Bay_breasted_Warbler",-->
<!--    "Black_and_white_Warbler",-->
<!--    "Black_throated_Blue_Warbler",-->
<!--    "Blue_winged_Warbler",-->
<!--    "Canada_Warbler",-->
<!--    "Cape_May_Warbler",-->
<!--    "Cerulean_Warbler",-->
<!--    "Chestnut_sided_Warbler",-->
<!--    "Golden_winged_Warbler",-->
<!--    "Hooded_Warbler",-->
<!--    "Kentucky_Warbler",-->
<!--    "Magnolia_Warbler",-->
<!--    "Mourning_Warbler",-->
<!--    "Myrtle_Warbler",-->
<!--    "Nashville_Warbler",-->
<!--    "Orange_crowned_Warbler",-->
<!--    "Palm_Warbler",-->
<!--    "Pine_Warbler",-->
<!--    "Prairie_Warbler",-->
<!--    "Prothonotary_Warbler",-->
<!--    "Swainson_Warbler",-->
<!--    "Tennessee_Warbler",-->
<!--    "Wilson_Warbler",-->
<!--    "Worm_eating_Warbler",-->
<!--    "Yellow_Warbler",-->
<!--    "Northern_Waterthrush",-->
<!--    "Louisiana_Waterthrush",-->
<!--    "Bohemian_Waxwing",-->
<!--    "Cedar_Waxwing",-->
<!--    "American_Three_toed_Woodpecker",-->
<!--    "Pileated_Woodpecker",-->
<!--    "Red_bellied_Woodpecker",-->
<!--    "Red_cockaded_Woodpecker",-->
<!--    "Red_headed_Woodpecker",-->
<!--    "Downy_Woodpecker",-->
<!--    "Bewick_Wren",-->
<!--    "Cactus_Wren",-->
<!--    "Carolina_Wren",-->
<!--    "House_Wren",-->
<!--    "Marsh_Wren",-->
<!--    "Rock_Wren",-->
<!--    "Winter_Wren",-->
<!--    "Common_Yellowthroat"-->
<!--    )-->
<!--    val predictedClass = if (predictedIndex != -1) classNames[predictedIndex] else "Unknown"-->

<!--    Log.d("Predicted Index", predictedIndex.toString())-->

<!--    //                val floatArray = outputs as FloatArray-->
<!--    //-->
<!--    //                for (index in floatArray.indices) {-->
<!--    //                    val value = floatArray[index]-->
<!--    //                    Log.d("OutputValue", "Value at index $index: $value")-->
<!--    //                }-->

<!--    Log.d("sucesss",outputFeature0.toString())-->
<!--    Log.d("sucesss1",outputs.toString())-->
<!--    Log.d("sucesss2",predictedClass.toString())-->

<!--    binding.text.text = predictedClass-->
<!--    binding.text.isVisible = true-->

<!--    model.close()-->

<!--    }-->
<!--    }-->
<!--    }-->
<!--    //    fun classifyBird(byteBuffer: ByteBuffer): String {-->
<!--    //        // Create the input tensor-->
<!--    //        val inputShape = intArrayOf(1, 32, 32, 3)-->
<!--    //        val inputFeature0 = TensorBuffer.createFixedSize(inputShape, DataType.FLOAT32)-->
<!--    //        inputFeature0.loadBuffer(byteBuffer)-->
<!--    //-->
<!--    //        // Create the output tensor-->
<!--    //        val outputShape = intArrayOf(1, 200) // Assuming you have 200 classes-->
<!--    //        val outputFeature0 = TensorBuffer.createFixedSize(outputShape, DataType.FLOAT32)-->
<!--    //-->
<!--    //        // Run model inference-->
<!--    //        interpreter.run(inputFeature0.buffer, outputFeature0.buffer)-->
<!--    //-->
<!--    //        // Post-processing: Get the predicted class index-->
<!--    //        val predictedClassIndex = outputFeature0.floatArray.argmax()-->
<!--    //-->
<!--    //        // Replace 'classLabels' with your actual class labels-->
<!--    //        val classLabels = arrayOf("bird_class_1", "bird_class_2") // 200 class labels-->
<!--    //        val predictedClassLabel = classLabels[predictedClassIndex]-->
<!--    //-->
<!--    //        return predictedClassLabel-->
<!--    //    }-->
<!--    //-->
<!--    //    private fun loadModelFile(context: Context, modelPath: String): ByteBuffer {-->
<!--    //        val assetFileDescriptor = context.assets.openFd(modelPath)-->
<!--    //        val inputStream = assetFileDescriptor.createInputStream()-->
<!--    //        val modelBuffer = inputStream.readBytes()-->
<!--    //        return modelBuffer.toByteBuffer()-->
<!--    //    }-->
<!--    }-->